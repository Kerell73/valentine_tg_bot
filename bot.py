from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, MessageHandler, filters, CallbackQueryHandler, ContextTypes
from db import init_db, add_user, save_valentine, get_user_valentines, find_users_by_name, find_users_by_username, get_user_by_id
from alerts import alert_receiver

TOKEN = "TOKEN"

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    existing_user = get_user_by_id(user.id)

    if existing_user:
        keyboard = [
            [InlineKeyboardButton("–ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ –≤–∞–ª–µ–Ω—Ç–∏–Ω–∫–∏ üì´", callback_data='check_valentines')],
            [InlineKeyboardButton("–í—ñ–¥–ø—Ä–∞–≤–∏—Ç–∏ –≤–∞–ª–µ–Ω—Ç–∏–Ω–∫—É üíå", callback_data='send_valentine')]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)

        await update.message.reply_text(
            "–ü—Ä–∏–≤—ñ—Ç! –¢–∏ –≤–∂–µ —î –≤ –±–∞–∑—ñ ü´µü•∏ –û—Å—å —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω–∏—Ö –¥—ñ–π üíò",
            reply_markup=reply_markup
        )
    else:
        await update.message.reply_text("–ü—Ä–∏–≤—ñ—Ç üôãüèø‚Äç‚ôÇÔ∏è –î–∞–≤–∞–π –∑–∞—Ä–µ—î—Å—Ç—Ä—É—î–º–æ—Å—å. –ù–∞–ø–∏—à–∏ —Å–≤–æ—î —ñ–º'—è:")
        context.user_data['step'] = 'get_first_name'


async def check_valentines(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    valentines = get_user_valentines(user_id)

    if valentines:
        response = "\n\n".join(
            [f"–í—ñ–¥: {'–ê–Ω–æ–Ω—ñ–º–Ω–æ' if v[2] else v[1]}\n–¢–µ–∫—Å—Ç: {v[0]}" for v in valentines]
        )

        await update.callback_query.answer()
        await update.callback_query.edit_message_text(f"–¢–≤–æ—ó –≤–∞–ª–µ–Ω—Ç–∏–Ω–∫–∏ üì´\n\n{response}")
    else:
        await update.callback_query.answer()
        await update.callback_query.edit_message_text("–ü–æ–∫–∏ —â–æ —Ç—É—Ç –ø—É—Å—Ç–æ ü§∑üèø‚Äç‚ôÇÔ∏è")

    keyboard = [
        [InlineKeyboardButton("–ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ –≤–∞–ª–µ–Ω—Ç–∏–Ω–∫–∏ üì´", callback_data='check_valentines')],
        [InlineKeyboardButton("–í—ñ–¥–ø—Ä–∞–≤–∏—Ç–∏ –≤–∞–ª–µ–Ω—Ç–∏–Ω–∫—É üíå", callback_data='send_valentine')]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.callback_query.message.reply_text("–û—Å—å —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω–∏—Ö –¥—ñ–π:", reply_markup=reply_markup)


async def send_valentine(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.callback_query.answer()
    keyboard = [
        [InlineKeyboardButton("–¢–∞–∫", callback_data='anonymous_yes')],
        [InlineKeyboardButton("–ù—ñ", callback_data='anonymous_no')]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.callback_query.edit_message_text(
        "–ù–∞–¥—ñ—Å–ª–∞—Ç–∏ –≤–∞–ª–µ–Ω—Ç–∏–Ω–∫—É –∞–Ω–æ–Ω—ñ–º–Ω–æ? ü•∑üèø",
        reply_markup=reply_markup
    )


async def set_anonymous(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    context.user_data['is_anonymous'] = query.data == 'anonymous_yes'
    await query.edit_message_text("–©–æ–± –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ –≤–∞–ª–µ–Ω—Ç–∏–Ω–∫—É, –Ω–∞–ø–∏—à–∏ —ñ–º'—è —Ç–∞ –ø—Ä—ñ–∑–≤–∏—â–µ –æ—Ç—Ä–∏–º—É–≤–∞—á–∞ –∞–±–æ –π–æ–≥–æ @username ü´Ç")
    context.user_data['step'] = 'get_receiver'


async def collect_user_data(update: Update, context: ContextTypes.DEFAULT_TYPE):
    step = context.user_data.get('step')

    if step == 'get_first_name':
        context.user_data['first_name'] = update.message.text
        await update.message.reply_text("–ù–∞–ø–∏—à–∏ —Å–≤–æ—î –ø—Ä—ñ–∑–≤–∏—â–µ:")
        context.user_data['step'] = 'get_last_name'

    elif step == 'get_last_name':
        context.user_data['last_name'] = update.message.text
        user = update.effective_user
        add_user(user.id, user.username, context.user_data['first_name'], context.user_data['last_name'])

        keyboard = [
            [InlineKeyboardButton("–ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ –≤–∞–ª–µ–Ω—Ç–∏–Ω–∫–∏ üì´", callback_data='check_valentines')],
            [InlineKeyboardButton("–í—ñ–¥–ø—Ä–∞–≤–∏—Ç–∏ –≤–∞–ª–µ–Ω—Ç–∏–Ω–∫—É üíå", callback_data='send_valentine')]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)

        await update.message.reply_text(
            "–ü—Ä–∏–≤—ñ—Ç! –¢–∏ –≤–∂–µ —î –≤ –±–∞–∑—ñ ü´µü•∏ –û—Å—å —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω–∏—Ö –¥—ñ–π üíò",
            reply_markup=reply_markup
        )
        context.user_data.clear()

    elif step == 'get_receiver':
        receiver_query = update.message.text.strip()

        # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞ –ø–æ—à—É–∫ –ø–æ —é–∑–µ—Ä–Ω–µ–π–º—É
        if receiver_query.startswith('@'):
            username = receiver_query[1:]  # –í–∏–¥–∞–ª—è—î–º–æ —Å–∏–º–≤–æ–ª '@'
            possible_receivers = find_users_by_username(username)
        else:
            possible_receivers = find_users_by_name(receiver_query)

        if possible_receivers:
            keyboard = [
                [InlineKeyboardButton(user[1], callback_data=f"select_receiver_{user[0]}")]
                for user in possible_receivers
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            await update.message.reply_text("–û–±–µ—Ä–∏ –æ–¥–µ—Ä–∂—É–≤–∞—á–∞ –∑—ñ —Å–ø–∏—Å–∫—É üëá", reply_markup=reply_markup)
        else:
            await update.message.reply_text(
                "–ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤, —è–∫—ñ –≤—ñ–¥–ø–æ–≤—ñ–¥–∞—é—Ç—å —Ç–≤–æ—î–º—É –∑–∞–ø–∏—Ç—É üò≠ –°–ø—Ä–æ–±—É–π —â–µ —Ä–∞–∑..."
            )

    elif step == 'get_valentine_text':
        valentine_text = update.message.text.strip()

        sender_id = update.effective_user.id
        receiver_id = context.user_data.get('receiver_id')
        is_anonymous = context.user_data.get('is_anonymous', False)

        if receiver_id:
            save_valentine(sender_id, receiver_id, valentine_text, is_anonymous=is_anonymous)

            keyboard = [
                [InlineKeyboardButton("–ü–æ–¥–∏–≤–∏—Ç–∏—Å—å –≤–∞–ª–µ–Ω—Ç–∏–Ω–∫–∏ üì´", callback_data='check_valentines')],
                [InlineKeyboardButton("–í—ñ–¥–ø—Ä–∞–≤–∏—Ç–∏ —â–µ –æ–¥–Ω—É –≤–∞–ª–µ–Ω—Ç–∏–Ω–∫—É üíå", callback_data='send_valentine')]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)

            await update.message.reply_text(
                "–í–∞–ª–µ–Ω—Ç–∏–Ω–∫–∞ —É—Å–ø—ñ—à–Ω–æ –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–∞!",
                reply_markup=reply_markup
            )

            await alert_receiver(receiver_id, TOKEN)
        else:
            await update.message.reply_text("–°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.")

        context.user_data.clear()

async def select_receiver(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    receiver_id = int(query.data.split('_')[-1])
    context.user_data['receiver_id'] = receiver_id
    await query.edit_message_text("–ù–∞–ø–∏—à–∏ —Ç–µ–∫—Å—Ç –≤–∞–ª–µ–Ω—Ç–∏–Ω–∫–∏ ‚úçÔ∏èüíã")
    context.user_data['step'] = 'get_valentine_text'

def main():
    init_db()
    application = Application.builder().token(TOKEN).build()

    application.add_handler(CommandHandler("start", start))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, collect_user_data))
    application.add_handler(CallbackQueryHandler(check_valentines, pattern='^check_valentines$'))
    application.add_handler(CallbackQueryHandler(send_valentine, pattern='^send_valentine$'))
    application.add_handler(CallbackQueryHandler(set_anonymous, pattern='^anonymous_(yes|no)$'))
    application.add_handler(CallbackQueryHandler(select_receiver, pattern='^select_receiver_\\d+$'))

    application.run_polling()

if __name__ == "__main__":
    main()